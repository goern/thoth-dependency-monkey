#!/usr/bin/env node

/*  thoth-dependency-monkey
 *   Copyright(C) 2018 Christoph GÃ¶rn
 *
 *  This program is free software: you can redistribute it and / or modify
 *   it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

const version = "0.1.0";
const name = "Thoth: Dependency Monkey NPM Validator";

const DEBUG = process.env.DEBUG || false;

const STACK_SPECIFICATION = process.env.STACK_SPECIFICATION || "bn-bruecken";
const ECOSYSTEM = process.env.ECOSYSTEM || "npm";

const winston = require("winston");
const assert = require("assert");
const npa = require("npm-package-arg");

/**
 * This will parse a NPM ecosystem software stack specification and return a list of package specifications
 *
 * @param {string} s is a software stack specification as given to `npm install <s>`
 * @returns {Array}  of packages and their fetchSpec
 */
function parseStackSpecification(s) {
    var result = [];
    var fields = s.split(" "); // TODO this is way to trivial parsing...

    try {
        fields.forEach(package_spec => {
            var parsed = npa(package_spec);

            result.push(parsed);
        });

        return result;
    } catch (ex) {
        winston.error("can't parse: %s", s);
    }
}

function main() {
    if (DEBUG == true) {
        winston.configure({
            transports: [
                new winston.transports.Console({
                    timestamp: true,
                    json: false,
                    colorize: false,
                    level: "debug"
                })
            ]
        });
    }

    winston.info("%s %s starting up...", name, version);

    var specs = parseStackSpecification(STACK_SPECIFICATION);

    specs.forEach(package_spec => {
        winston.debug(package_spec);
    });
}

module.exports = parseStackSpecification;

main();